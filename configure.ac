dnl Process this file with autoconf to produce a configure script.
dnl configuration file for pmacct 

AC_INIT([src/pmacctd.c], [1.6.0-git], [paolo@pmacct.net])
AM_INIT_AUTOMAKE([foreign])
AC_CONFIG_MACRO_DIR([m4])
LT_INIT
AC_PREFIX_DEFAULT([/usr/local])

COMPILE_ARGS="${ac_configure_args}"
AC_DEFINE_UNQUOTED(COMPILE_ARGS, "$COMPILE_ARGS")

dnl Checks for programs.
AC_PROG_CC
host_os=`uname`
host_cpu=`uname -m`
host_os1=`uname -rs`

AC_MSG_CHECKING(OS)
AC_MSG_RESULT($host_os)

AC_MSG_CHECKING(hardware)
AC_MSG_RESULT($host_cpu)

dnl initial checks; tweakings to CFLAGS and LDFLAGS
dnl see final checks for tweakings to LIBS
if test "x$ac_cv_prog_gcc" = xyes ; then
  CFLAGS="-O2 ${CFLAGS}"
  case "$host_os" in
    IRIX*)
      CFLAGS="-mabi=n32 -fno-builtins"
      LDFLAGS="-mabi=n32 -Wl,-rpath,/usr/lib32 ${LDFLAGS}"
      ;;
  esac
else
  case "$host_os" in
    IRIX*)
      CFLAGS="-O2 -I/usr/freeware/include ${CFLAGS}"
      LDFLAGS="-n32 -L/usr/lib32 -L/usr/freeware/lib32 ${LDFLAGS}"
      ;;
    OSF*)
      CFLAGS="-O -assume noaligned_objects ${CFLAGS}"
      ;;
  esac
fi

dnl set debug level
AC_MSG_CHECKING([whether to enable debugging compiler options])
AC_ARG_ENABLE(debug,
	[  --enable-debug                   Enable debugging compiler options (default: no)],
	AC_MSG_RESULT(yes)
	tmp_CFLAGS=`echo $CFLAGS | sed 's/O2/O0/g'`
	CFLAGS="$tmp_CFLAGS"
  	CFLAGS="$CFLAGS -g -W -Wall",
  	#CFLAGS="$CFLAGS -Waggregate-return"
  	#CFLAGS="$CFLAGS -Wcast-align -Wcast-qual -Wnested-externs"
  	#CFLAGS="$CFLAGS -Wshadow -Wbad-function-cast -Wwrite-strings"
	AC_MSG_RESULT(no)
)

dnl set relax level
AC_MSG_CHECKING([whether to relax compiler optimizations])
AC_ARG_ENABLE(relax,
[  --enable-relax                   Relax compiler optimization (default: no)],
	AC_MSG_RESULT(yes)
        tmp_CFLAGS=`echo $CFLAGS | sed 's/O2/O0/g'`
        CFLAGS="$tmp_CFLAGS",
        AC_MSG_RESULT(no)
)

dnl: shared object handling
AC_MSG_CHECKING([whether to disable linking against shared objects])
AC_ARG_ENABLE(so,
        [  --disable-so                     Disable linking against shared objects (default: no)],
	[ 
        if test x$enableval = x"yes" ; then
          AC_MSG_RESULT(no)
          AC_CHECK_FUNC(dlopen, [ USING_DLOPEN="yes" ], [])
          AC_CHECK_LIB(dl, dlopen,
                [ USING_DLOPEN="yes"
                  LIBS="${LIBS} -ldl" ],
                  [])
          if test x"$USING_DLOPEN" != x"yes"; then
                AC_MSG_ERROR(Unable to find dlopen(). Try with --disable-so)
          fi
        else
          AC_MSG_RESULT(yes)
	  if test "x$ac_cv_prog_gcc" = xyes ; then
		LDFLAGS="-static ${LDFLAGS}"
	  fi
        fi
        ],
	[
        AC_MSG_RESULT(no)
        AC_CHECK_FUNC(dlopen, [ USING_DLOPEN="yes" ], [])
        AC_CHECK_LIB(dl, dlopen,
                [ USING_DLOPEN="yes"
                  LIBS="${LIBS} -ldl" ],
                  [])
        if test x"$USING_DLOPEN" != x"yes"; then
                AC_MSG_ERROR(Unable to find dlopen(). Try with --disable-so)
        fi
	]
)
dnl finish: shared object handling

dnl os specific flags
case "$host_os" in
  OSF*)
    AC_DEFINE(OSF1, 1)
    ;;
  Sun*)
    AC_DEFINE(SOLARIS, 1)
    LIBS="-lresolv -lsocket -lnsl ${LIBS}"
    ;;
  IRIX*)
    AC_DEFINE(IRIX, 1)
    ;;
  *BSD)
    AC_DEFINE(BSD, 1)
    ;;
esac

dnl cpu specific flags
case "$host_cpu" in
  sun*)
  AC_DEFINE(CPU_sparc, 1)
  ;;
esac

AC_CHECK_PROG(MAKE, gmake, gmake)
if test x"$MAKE" = x""; then
  AC_CHECK_PROG(MAKE, make, make)
fi
AC_SUBST(MAKE)
AC_PROG_MAKE_SET

dnl
dnl some systems have __progname ; if this is the case and we play around argv
dnl we need to enable a minor hack to make things work nicely.
dnl
AC_MSG_CHECKING(for __progname)
AC_TRY_LINK([ extern char *__progname; ], 
[ __progname = "test"; ],
[AC_MSG_RESULT(yes); AC_DEFINE(PROGNAME, 1)], [AC_MSG_RESULT(no)])

dnl
dnl Some checks to understand whether we need to instruct the linker for
dnl exporting collector symbols to dynamically loaded classifiers. 
dnl
dnl OS'es with ELF executables using the GNU linker (Linux and recent *BSD,
dnl in rare cases Solaris) typically need '-Wl,-export-dynamic'; some SYSv4
dnl systems instead need '-Wl,-Bexport'; AIX 4.x wants -Wl,-bexpall,-brtl'.
dnl
      
AC_MSG_CHECKING(for extra flags needed to export symbols)
if test "x$ac_cv_prog_gcc" = xyes ; then
  case $host_os in
    aix4*|aix5*)
	CFLAGS="${CFLAGS} -Wl,-bexpall,-brtl"
    ;;
    *)
	save_ldflags="${LDFLAGS}"
	LDFLAGS="-Wl,--export-dynamic ${save_ldflags}"
	AC_TRY_LINK(,,
		[ AC_MSG_RESULT(--export-dynamic) ],
		[ LDFLAGS="-Wl,-Bexport ${save_ldflags}"
		  AC_TRY_LINK(,,
			[ AC_MSG_RESULT(-Bexport) ],
		  	[ AC_MSG_RESULT(none)
		    	  LDFLAGS="${save_ldflags}" ]
		  )
		]
	)
    ;;
  esac
  else AC_MSG_RESULT(none)
fi

dnl
dnl some C compilers (ex. MipsPRO) don't know how to parse the 'inline' keyword
dnl
AC_MSG_CHECKING(for static inline)
AC_TRY_COMPILE([#include <stdio.h>]

static inline func()
{
}
,
[
  func();
],
[AC_MSG_RESULT(yes)], [AC_MSG_RESULT(no); AC_DEFINE(NOINLINE, 1)])

dnl
dnl Check for architecture endianess: big | little 
dnl
dnl XXX: switch to manually define this feature 
ac_cv_endianess="unknown"
if test x"$ac_cv_endianess" = x"unknown"; then
  AC_MSG_CHECKING(endianess)
  AC_TRY_RUN([main () {

  union
  {
    long l;
    char c[sizeof (long)];
  } u;
  u.l = 1;
  exit (u.c[sizeof (long) - 1] == 1);
  }], ac_cv_endianess="little", ac_cv_endianess="big", ac_cv_endianess="little")
  AC_MSG_RESULT($ac_cv_endianess)
fi

if test x"$ac_cv_endianess" = x"big"; then
  AC_DEFINE(IM_BIG_ENDIAN, 1)
fi
if test x"$ac_cv_endianess" = x"little"; then
  AC_DEFINE(IM_LITTLE_ENDIAN, 1)
fi

dnl
dnl Check for unaligned memory access; based entirely over
dnl AC_LBL_UNALIGNED_ACCESS
dnl
dnl XXX: switch to manually define this feature;
ac_cv_unaligned="unknown"
case "$host_cpu" in
  alpha*|arm*|hp*|mips*|sh*|sparc*|ia64|nv1)
    ac_cv_unaligned="fail"
    AC_MSG_CHECKING(unaligned accesses)
    AC_MSG_RESULT($ac_cv_unaligned)
    ;;
esac

if test x"$ac_cv_unaligned" = x"unknown"; then
  AC_MSG_CHECKING(unaligned accesses)
  cat > conftest.c << EOF
    #include <sys/types.h>
    #include <sys/wait.h>
    #include <stdio.h>
    unsigned char a[[5]] = { 1, 2, 3, 4, 5 };
    main () {
    	unsigned int i;
        pid_t pid;
        int status;
        /* avoid "core dumped" message */
        pid = fork();
        if (pid <  0) exit(2);
        if (pid > 0) {
        	/* parent */
                pid = waitpid(pid, &status, 0);
                if (pid < 0) exit(3);
                exit(!WIFEXITED(status));
        }
        /* child */
        i = *(unsigned int *)&a[[1]];
        printf("%d\n", i);
        exit(0);
    }
EOF
  ${CC-cc} -o conftest $CFLAGS $CPPFLAGS $LDFLAGS \
	conftest.c $LIBS >/dev/null 2>&1
  if test ! -x conftest ; then
    ac_cv_unaligned="fail"
  else
    ./conftest >conftest.out
    if test ! -s conftest.out ; then ac_cv_unaligned="fail"
    else ac_cv_unaligned="ok"
    fi
  fi
  rm -f conftest* core core.conftest
  AC_MSG_RESULT($ac_cv_unaligned)
fi

if test x"$ac_cv_unaligned" = x"fail"; then
  AC_DEFINE(NEED_ALIGN, 1)
fi

AC_MSG_CHECKING([whether to enable L2 features])
AC_ARG_ENABLE(l2,
        [  --enable-l2                      Enable Layer-2 features and support (default: yes)],
        if test x$enableval = x"yes" ; then
          AC_MSG_RESULT(yes)
	  AC_DEFINE(HAVE_L2, 1) 
        else
          AC_MSG_RESULT(no)
        fi
        ,
        AC_MSG_RESULT(yes)
	AC_DEFINE(HAVE_L2, 1) 
)

AC_MSG_CHECKING([whether to enable IPv6 code])
AC_ARG_ENABLE(ipv6,
        [  --enable-ipv6                    Enable IPv6 code (default: no)],
	[ 
        AC_MSG_RESULT(yes)
        AC_CHECK_FUNCS(inet_pton)
        if test x"$ac_cv_func_inet_pton" = x"no"; then
          AC_MSG_ERROR(ERROR: missing inet_pton(); disable IPv6 hooks !)
        fi

	AC_CHECK_FUNCS(inet_ntop)
	if test x"$ac_cv_func_inet_ntop" = x"no"; then
          AC_MSG_ERROR(ERROR: missing inet_ntop(); disable IPv6 hooks !)
        fi

	AC_DEFINE(ENABLE_IPV6, 1)
	ipv6support="yes"
	case "$host_os" in
	IRIX*)
	  AC_DEFINE(INET6, 1)
	  ;;
	esac ],
        AC_MSG_RESULT(no)
	ipv6support="no"
)

AC_MSG_CHECKING([whether to enable IP prefix labels])
AC_ARG_ENABLE(plabel,
  [  --enable-plabel                  Enable IP prefix labels (default: no)],
  [
        AC_MSG_RESULT(yes)

        AC_DEFINE(ENABLE_PLABEL, 1)
  ])

AC_ARG_WITH(pcap-includes,
  [  --with-pcap-includes=DIR         Search the specified directories for header files],
  [
	AC_LINEARIZE_PATH($withval, withval=$absdir)
	INCLUDES="${INCLUDES} -I$withval"
	PCAPINCLS=$withval
	PCAPINCLUDESFOUND=1
  ])

if test x"$PCAPINCLS" != x""; then
  AC_MSG_CHECKING(your own pcap includes)
  if test -r $PCAPINCLS/pcap.h; then 
    AC_MSG_RESULT(ok)
    AC_DEFINE(HAVE_PCAP_H, 1)
  else
    AC_MSG_RESULT(no)
    AC_MSG_ERROR(ERROR: missing pcap.h in $PCAPINCLS) 
  fi
fi

if test x"$PCAPINCLUDESFOUND" = x""; then
  AC_MSG_CHECKING([default locations for pcap.h])
  if test -r /usr/include/pcap.h; then
    AC_MSG_RESULT([found in /usr/include])
    PCAPINCLUDESFOUND=1
    AC_DEFINE(HAVE_PCAP_H, 1)
  elif test -r /usr/include/pcap/pcap.h; then
    AC_MSG_RESULT([found in /usr/include])
    PCAPINCLUDESFOUND=1
    AC_DEFINE(HAVE_PCAP_PCAP_H, 1)
  elif test -r /usr/local/include/pcap.h; then
    AC_MSG_RESULT([found in /usr/local/include])
    INCLUDES="${INCLUDES} -I/usr/local/include"
    PCAPINCLUDESFOUND=1
    AC_DEFINE(HAVE_PCAP_H, 1) 
  elif test -r /usr/local/include/pcap/pcap.h; then
    AC_MSG_RESULT([found in /usr/local/include])
    INCLUDES="${INCLUDES} -I/usr/local/include"
    PCAPINCLUDESFOUND=1
    AC_DEFINE(HAVE_PCAP_PCAP_H, 1)
  fi
  if test x"$PCAPINCLUDESFOUND" = x""; then
    AC_MSG_RESULT([not found])
    AC_MSG_ERROR(ERROR: missing pcap.h)
  fi
fi

AC_ARG_WITH(pcap-libs,
  [  --with-pcap-libs=DIR             Search the specified directories for libraries],
  [	
	AC_LINEARIZE_PATH($withval, withval=$absdir)
	LIBS="${LIBS} -L$withval"
	PCAPLIB=$withval
	PCAPLIBFOUND=1
  ])

if test x"$PCAPLIB" != x""; then
  AC_MSG_CHECKING(your own pcap libraries)
  if test -r $PCAPLIB/libpcap.a -o -r $PCAPLIB/libpcap.so; then
    AC_MSG_RESULT(ok)
    PCAP_LIB_FOUND=1
    AC_MSG_CHECKING(for PF_RING library)
    if test -r $PCAPLIB/libpfring.a -o -r $PCAPLIB/libpfring.so; then
      LIBS="${LIBS} -lpfring -lpcap"
      AC_MSG_RESULT(yes)
      PFRING_LIB_FOUND=1
    else
      AC_MSG_RESULT(no)
    fi
  else
    AC_MSG_RESULT(no)
    AC_MSG_ERROR(ERROR: unable to find pcap library in $PCAPLIB)
  fi
fi

if test x"$PCAPLIBFOUND" = x""; then
  AC_MSG_CHECKING([default locations for libpcap])
  if test -r /usr/local/lib/libpcap.a -o -r /usr/local/lib/libpcap.so; then
    LIBS="${LIBS} -L/usr/local/lib"
    AC_MSG_RESULT([found in /usr/local/lib])
    PCAPLIBFOUND=1
    AC_MSG_CHECKING(for PF_RING library)
    if test -r /usr/local/lib/libpfring.a -o -r /usr/local/lib/libpfring.so; then
      LIBS="${LIBS} -lpfring -lpcap"
      AC_MSG_RESULT(yes)
      PFRING_LIB_FOUND=1
    else
      AC_MSG_RESULT(no)
    fi
  else
    AC_MSG_RESULT(no)
  fi
fi

dnl Checks for libraries.

dnl libpcap is checked only if PF_RING is not found
if test x"$PFRING_LIB_FOUND" = x""; then
  AC_CHECK_LIB([pcap], [pcap_dispatch], [], [AC_MSG_ERROR([
    ERROR: missing pcap library. Refer to: http://www.tcpdump.org/
  ])])

  AC_CHECK_LIB([pcap], [pcap_setnonblock], [ AC_DEFINE(PCAP_7, 1) ], [])
  AC_CHECK_LIB([pcap], [bpf_filter], [ AC_DEFINE(PCAP_NOBPF, 1) ], [])
else
  dnl Unable to test: we should check for these libs
  #AC_CHECK_LIB([numa], [numa_bind], [], [AC_MSG_ERROR([
  #  ERROR: missing libnuma devel. Requirement for building PF_RING.
  #])])

  #AC_CHECK_LIB([rt], [clock_gettime], [], [AC_MSG_ERROR([
  #  ERROR: missing librt devel. Requirement for building PF_RING.
  #])])

  LIBS="${LIBS} -lrt -lnuma"
fi

dnl packet capture type check; taken from libpcap.
AC_MSG_CHECKING(packet capture type)
if test -r /dev/bpf0 ; then
        V_PCAP=bpf
elif test -r /usr/include/net/pfilt.h ; then
        V_PCAP=pf
elif test -r /dev/enet ; then
        V_PCAP=enet
elif test -r /dev/nit ; then
        V_PCAP=snit
elif test -r /usr/include/sys/net/nit.h ; then
        V_PCAP=nit
elif test -r /usr/include/linux/socket.h ; then
        V_PCAP=linux
elif test -r /usr/include/net/raw.h ; then
        V_PCAP=snoop
elif test -r /usr/include/odmi.h ; then
        #
        # On AIX, the BPF devices might not yet be present - they're
        # created the first time libpcap runs after booting.
        # We check for odmi.h instead.
        #
        V_PCAP=bpf
elif test -r /usr/include/sys/dlpi.h ; then
        V_PCAP=dlpi
elif test -c /dev/bpf0 ; then           # check again in case not readable
        V_PCAP=bpf
elif test -c /dev/enet ; then           # check again in case not readable
        V_PCAP=enet
elif test -c /dev/nit ; then            # check again in case not readable
        V_PCAP=snit
else
        V_PCAP=null
fi
AC_MSG_RESULT($V_PCAP)
AC_DEFINE_UNQUOTED(PCAP_TYPE_$V_PCAP, 1)

dnl start: mysql handling
AC_MSG_CHECKING(whether to enable MySQL support)
AC_ARG_ENABLE(mysql,
  [  --enable-mysql                   Enable MySQL support (default: no)],
  [ case "$enableval" in
  yes)
    AC_MSG_RESULT(yes)
    USING_SQL="yes"
    USING_MYSQL="yes"

    AC_ARG_WITH(mysql-libs,
      [  --with-mysql-libs=DIR            Search for MySQL libs in the specified directory],
      [
	AC_LINEARIZE_PATH($withval, withval=$absdir)
	LIBS="${LIBS} -L$withval"
	MYSQLLIB=$withval
	MYSQLLIBFOUND=1
      ]) 

    if test x"$MYSQLLIB" != x""; then
      AC_MSG_CHECKING(your own MySQL client library)
      if test -r $MYSQLLIB/libmysqlclient.a -o -r $MYSQLLIB/libmysqlclient.so; then
        AC_MSG_RESULT(ok)
      else
        AC_MSG_RESULT(no)
	AC_MSG_ERROR(ERROR: missing MySQL client library in $MYSQLLIB)
      fi
    fi

    if test x"$MYSQLLIBFOUND" = x""; then
      AC_MSG_CHECKING([default locations for libmysqlclient])
      if test -r /usr/lib/mysql/libmysqlclient.a -o -r /usr/lib/mysql/libmysqlclient.so; then
	LIBS="${LIBS} -L/usr/lib/mysql"
	AC_MSG_RESULT([found in /usr/lib/mysql])
	MYSQLLIBFOUND=1
      elif test -r /usr/lib64/mysql/libmysqlclient.a -o -r /usr/lib64/mysql/libmysqlclient.so; then
        LIBS="${LIBS} -L/usr/lib64/mysql"
        AC_MSG_RESULT([found in /usr/lib64/mysql])
        MYSQLLIBFOUND=1
      elif test -r /usr/local/mysql/lib/libmysqlclient.a -o -r /usr/local/mysql/lib/libmysqlclient.so; then
	LIBS="${LIBS} -L/usr/local/mysql/lib"
	AC_MSG_RESULT([found in /usr/local/mysql/lib])
	MYSQLLIBFOUND=1
      elif test -r /usr/local/lib/mysql/libmysqlclient.a -o -r /usr/local/lib/mysql/libmysqlclient.so; then
	LIBS="${LIBS} -L/usr/local/lib/mysql"
	AC_MSG_RESULT([found in /usr/local/lib/mysql])
	MYSQLLIBFOUND=1
      else 
        AC_MSG_RESULT([not found])
      fi
    fi

    if test x"$MYSQLLIBFOUND" = x""; then
      AC_CHECK_LIB([mysqlclient], [mysql_real_connect], [], [AC_MSG_ERROR([
        ERROR: missing MySQL client library. Refer to: http://www.mysql.com/
      ])])
    else 
      LIBS="${LIBS} -lmysqlclient"
    fi 

    # Adding these as prerequisite for MySQL 5.6 
    AC_CHECK_LIB([stdc++], [main], [LIBS="${LIBS} -lstdc++"], [AC_MSG_ERROR([
      ERROR: missing libstdc++ devel. Requirement for building MySQL.
    ])])
    AC_CHECK_LIB([rt], [clock_gettime], [LIBS="${LIBS} -lrt"], [AC_MSG_ERROR([
      ERROR: missing librt devel. Requirement for building MySQL.
    ])])

    AC_ARG_WITH(mysql-includes,
      [  --with-mysql-includes=DIR        Search for MySQL includes in the specified directory],
      [
	AC_LINEARIZE_PATH($withval, withval=$absdir)
	INCLUDES="${INCLUDES} -I$withval"
	MYSQLINCLUDES=$withval
	MYSQLINCLUDESFOUND=1
      ])

    if test x"$MYSQLINCLUDES" != x""; then
      AC_MSG_CHECKING(your own MySQL headers)
      if test -r $MYSQLINCLUDES/mysql/mysql.h; then
        AC_MSG_RESULT(ok)
      elif test -r $MYSQLINCLUDES/mysql.h; then
	AC_MSG_RESULT(ok)
	AC_DEFINE(CUT_MYSQLINCLUDES_DIR, 1)
      else
	AC_MSG_RESULT(no)
	AC_MSG_ERROR(ERROR: missing MySQL headers in $MYSQLINCLUDES)
      fi
    fi

    if test x"$MYSQLINCLUDESFOUND" = x""; then 
      AC_MSG_CHECKING([default locations for mysql.h])
      if test -r /usr/include/mysql/mysql.h; then
	AC_MSG_RESULT([found in /usr/include/mysql])
	MYSQLINCLUDESFOUND=1;
      elif test -r /usr/local/include/mysql/mysql.h; then
	INCLUDES="${INCLUDES} -I/usr/local/include"
	AC_MSG_RESULT([found in /usr/local/include/mysql])
	MYSQLINCLUDESFOUND=1;
      elif test -r /usr/local/mysql/include/mysql.h; then
        INCLUDES="${INCLUDES} -I/usr/local/mysql/include"
        AC_MSG_RESULT([found in /usr/local/mysql/include])
	AC_DEFINE(CUT_MYSQLINCLUDES_DIR, 1)
        MYSQLINCLUDESFOUND=1;
      fi
      if test x"$MYSQLINCLUDESFOUND" = x""; then
	AC_MSG_RESULT([not found])
      fi
    fi

    if test x"$MYSQLINCLUDESFOUND" = x""; then
      AC_CHECK_HEADER([mysql/mysql.h],,
      [AC_MSG_ERROR(ERROR: missing MySQL headers)])      
    fi

    AC_DEFINE(WITH_MYSQL, 1)
    PLUGINS="${PLUGINS} mysql_plugin.c"
    ;;
  no)
    AC_MSG_RESULT(no)
    ;;
  esac ],
AC_MSG_RESULT(no))
dnl finish: mysql handling

dnl start: pgsql handling
AC_MSG_CHECKING(whether to enable PostgreSQL support)
AC_ARG_ENABLE(pgsql,
  [  --enable-pgsql                   Enable PostgreSQL support (default: no)],
  [ case "$enableval" in
  yes)
    AC_MSG_RESULT(yes)
    USING_SQL="yes"
    USING_PGSQL="yes"

    AC_ARG_WITH(pgsql-libs,
      [  --with-pgsql-libs=DIR            Search for PostgreSQL libs in the specified directory],
      [
	AC_LINEARIZE_PATH($withval, withval=$absdir)
	LIBS="${LIBS} -L$withval"
	PGSQLLIB=$withval
	PGSQLLIBFOUND=1
      ]) 

    if test x"$PGSQLLIB" != x""; then
      AC_MSG_CHECKING(your own PostgreSQL client library)
      if test -r $PGSQLLIB/libpq.a -o -r $PGSQLLIB/libpq.so; then
        AC_MSG_RESULT(ok)
      else
        AC_MSG_RESULT(no)
	AC_MSG_ERROR(ERROR: missing PostgreSQL client library in $PGSQLLIB)
      fi
    fi

    if test x"$PGSQLLIBFOUND" = x""; then
      AC_MSG_CHECKING([default locations for libpq])
      if test -r /usr/lib/libpq.a -o -r /usr/lib/libpq.so; then
        AC_MSG_RESULT([found in /usr/lib])
        PGSQLLIBFOUND=1
      elif test -r /usr/lib64/libpq.a -o -r /usr/lib64/libpq.so; then
	LIBS="${LIBS} -L/usr/lib64"
        AC_MSG_RESULT([found in /usr/lib64])
        PGSQLLIBFOUND=1
      elif test -r /usr/local/lib/libpq.a -o -r /usr/local/lib/libpq.so; then
	LIBS="${LIBS} -L/usr/local/lib"
	AC_MSG_RESULT([found in /usr/local/lib])
	PGSQLLIBFOUND=1
      elif test -r /usr/local/pgsql/lib/libpq.a -o -r /usr/local/pgsql/lib/libpq.so; then
	LIBS="${LIBS} -L/usr/local/pgsql/lib"
	AC_MSG_RESULT([found in /usr/local/pgsql/lib])
	PGSQLLIBFOUND=1
      else 
        AC_MSG_RESULT([not found])
      fi
    fi

    if test x"$PGSQLLIBFOUND" = x""; then
      AC_CHECK_LIB([pq], [PQconnectdb], [], [AC_MSG_ERROR([
        ERROR: missing PQ library. Refer to: http://www.postgresql.org/
      ])])
    else 
      LIBS="${LIBS} -lpq"
    fi 

    AC_ARG_WITH(pgsql-includes,
      [  --with-pgsql-includes=DIR        Search for PostgreSQL includes in the specified directory],
      [
	AC_LINEARIZE_PATH($withval, withval=$absdir)
	INCLUDES="${INCLUDES} -I$withval"
	PGSQLINCLUDES=$withval
	PGSQLINCLUDESFOUND=1
      ])

    if test x"$PGSQLINCLUDES" != x""; then
      AC_MSG_CHECKING(your own PostgreSQL headers)
      if test -r $PGSQLINCLUDES/libpq-fe.h; then
        AC_MSG_RESULT(ok)
      else
	AC_MSG_RESULT(no)
	AC_MSG_ERROR(ERROR: missing pgsql headers in $PGSQLINCLUDES)
      fi
    fi

    if test x"$PGSQLINCLUDESFOUND" = x""; then 
      AC_MSG_CHECKING([default locations for libpq-fe.h])
      if test -r /usr/include/libpq-fe.h; then
	AC_MSG_RESULT([found in /usr/include])
	PGSQLINCLUDESFOUND=1;
      elif test -r /usr/local/include/libpq-fe.h; then
        AC_MSG_RESULT([found in /usr/local/include])
        INCLUDES="${INCLUDES} -I/usr/local/include"
        PGSQLINCLUDESFOUND=1;
      elif test -r /usr/local/pgsql/include/libpq-fe.h; then
	AC_MSG_RESULT([found in /usr/local/pgsql/include])
	INCLUDES="${INCLUDES} -I/usr/local/pgsql/include"
	PGSQLINCLUDESFOUND=1;
      fi
      if test x"$PGSQLINCLUDESFOUND" = x""; then
	AC_MSG_RESULT([not found])
      fi
    fi

    if test x"$PGSQLINCLUDESFOUND" = x""; then
      AC_CHECK_HEADER([libpq-fe.h],,
      [AC_MSG_ERROR(ERROR: missing PostgreSQL headers)])      
    fi

    AC_DEFINE(WITH_PGSQL, 1)
    PLUGINS="${PLUGINS} pgsql_plugin.c"
    ;;
  no)
    AC_MSG_RESULT(no)
    ;;
  esac ],
AC_MSG_RESULT(no))
dnl finish: pgsql handling

dnl start: mongodb handling
AC_MSG_CHECKING(whether to enable MongoDB support)
AC_ARG_ENABLE(mongodb,
  [  --enable-mongodb                 Enable MongoDB support (default: no)],
  [ case "$enableval" in
  yes)
    AC_MSG_RESULT(yes)
dnl USING_SQL="yes"
    USING_MONGODB="yes"

    AC_ARG_WITH(mongodb-libs,
      [  --with-mongodb-libs=DIR          Search for MongoDB libs in the specified directory],
      [
	AC_LINEARIZE_PATH($withval, withval=$absdir)
	LIBS="${LIBS} -L$withval"
	MONGODBLIB=$withval
	MONGODBLIBFOUND=1
      ]) 

    if test x"$MONGODBLIB" != x""; then
      AC_MSG_CHECKING(your own MongoDB library)
      if test -r $MONGODBLIB/libmongoc.a -o -r $MONGODBLIB/libmongoc.so; then
        AC_MSG_RESULT(ok)
      else
        AC_MSG_RESULT(no)
	AC_MSG_ERROR(ERROR: missing MongoDB library in $MONGODBLIB)
      fi
    fi

    if test x"$MONGODBLIBFOUND" = x""; then
      AC_MSG_CHECKING([default locations for libmongoc])
      if test -r /usr/lib/libmongoc.a -o -r /usr/lib/libmongoc.so; then
	AC_MSG_RESULT([found in /usr/lib])
	MONGODBLIBFOUND=1
      elif test -r /usr/lib64/libmongoc.a -o -r /usr/lib64/libmongoc.so; then
        LIBS="${LIBS} -L/usr/lib64"
        AC_MSG_RESULT([found in /usr/lib64])
        MONGODBLIBFOUND=1
      elif test -r /usr/local/lib/libmongoc.a -o -r /usr/local/lib/libmongoc.so; then
	LIBS="${LIBS} -L/usr/local/lib"
	AC_MSG_RESULT([found in /usr/local/lib])
	MONGODBLIBFOUND=1
      else 
        AC_MSG_RESULT([not found])
      fi
    fi

    if test x"$MONGODBLIBFOUND" = x""; then
      AC_CHECK_LIB([mongoc], [mongo_connect], [], [AC_MSG_ERROR([
        ERROR: missing MongoDB library (0.8 version). Refer to: https://github.com/mongodb/mongo-c-driver-legacy
      ])])
    else 
      LIBS="${LIBS} -lmongoc"
    fi 

    AC_ARG_WITH(mongodb-includes,
      [  --with-mongodb-includes=DIR      Search for MongoDB includes in the specified directory],
      [
	AC_LINEARIZE_PATH($withval, withval=$absdir)
	INCLUDES="${INCLUDES} -I$withval"
	MONGODBINCLUDES=$withval
	MONGODBINCLUDESFOUND=1
      ])

    if test x"$MONGODBINCLUDES" != x""; then
      AC_MSG_CHECKING(your own MongoDB headers)
      if test -r $MONGODBINCLUDES/mongo.h; then
        AC_MSG_RESULT(ok)
      else
	AC_MSG_RESULT(no)
	AC_MSG_ERROR(ERROR: missing MongoDB headers in $MONGODBINCLUDES)
      fi
    fi

    if test x"$MONGODBINCLUDESFOUND" = x""; then 
      AC_MSG_CHECKING([default locations for mongo.h])
      if test -r /usr/include/mongo.h; then
	AC_MSG_RESULT([found in /usr/include])
	MONGODBINCLUDESFOUND=1;
      elif test -r /usr/local/include/mongo.h; then
	INCLUDES="${INCLUDES} -I/usr/local/include"
	AC_MSG_RESULT([found in /usr/local/include])
	MONGODBINCLUDESFOUND=1;
      fi
      if test x"$MONGODBINCLUDESFOUND" = x""; then
	AC_MSG_RESULT([not found])
      fi
    fi

    if test x"$MONGODBINCLUDESFOUND" = x""; then
      AC_CHECK_HEADER([mongo.h],,
      [AC_MSG_ERROR(ERROR: missing MongoDB headers)])      
    fi

    AC_DEFINE(WITH_MONGODB, 1)
    PLUGINS="${PLUGINS} mongodb_plugin.c"
    ;;
  no)
    AC_MSG_RESULT(no)
    ;;
  esac ],
AC_MSG_RESULT(no))
dnl finish: mongodb handling

AC_MSG_CHECKING(whether to enable SQLite3 support)
AC_ARG_ENABLE(sqlite3,
  [  --enable-sqlite3                 Enable SQLite3 support (default: no)],
  [ case "$enableval" in
  yes)
    AC_MSG_RESULT(yes)
    USING_SQL="yes"
    USING_SQLITE3="yes"

    AC_ARG_WITH(sqlite3-libs,
      [  --with-sqlite3-libs=DIR          Search for SQLite3 libs in the specified directory],
      [
	AC_LINEARIZE_PATH($withval, withval=$absdir)
	LIBS="${LIBS} -L$withval"
	SQLITE3LIB=$withval
	SQLITE3LIBFOUND=1
      ]) 

    if test x"$SQLITE3LIB" != x""; then
      AC_MSG_CHECKING(your own SQLite3 client library)
      if test -r $SQLITE3LIB/libsqlite3.a -o -r $SQLITE3LIB/libsqlite3.so; then
        AC_MSG_RESULT(ok)
      else
        AC_MSG_RESULT(no)
	AC_MSG_ERROR(ERROR: missing SQLite3 client library in $SQLITE3LIB)
      fi
    fi

    if test x"$SQLITE3LIBFOUND" = x""; then
      AC_MSG_CHECKING([default locations for libsqlite3])
      if test -r /usr/lib/libsqlite3.a -o -r /usr/lib/libsqlite3.so; then
	AC_MSG_RESULT([found in /usr/lib])
	SQLITE3LIBFOUND=1
      elif test -r /usr/lib64/libsqlite3.a -o -r /usr/lib64/libsqlite3.so; then
        LIBS="${LIBS} -L/usr/lib64"
        AC_MSG_RESULT([found in /usr/lib64])
        SQLITE3LIBFOUND=1
      elif test -r /usr/local/sqlite3/lib/libsqlite3.a -o -r /usr/local/sqlite3/lib/libsqlite3.so; then
	LIBS="${LIBS} -L/usr/local/sqlite3/lib"
	AC_MSG_RESULT([found in /usr/local/sqlite3/lib])
	SQLITE3LIBFOUND=1
      elif test -r /usr/local/lib/libsqlite3.a -o -r /usr/local/lib/libsqlite3.so; then
	LIBS="${LIBS} -L/usr/local/lib"
	AC_MSG_RESULT([found in /usr/local/lib])
	SQLITE3LIBFOUND=1
      else 
        AC_MSG_RESULT([not found])
      fi
    fi

    if test x"$SQLITE3LIBFOUND" = x""; then
      AC_CHECK_LIB([sqlite3], [sqlite3_open], [], [AC_MSG_ERROR([
        ERROR: missing SQLite3 client library. Refer to: http://sqlite.org/
      ])])
    else 
      LIBS="${LIBS} -lsqlite3"
    fi 

    AC_ARG_WITH(sqlite3-includes,
      [  --with-sqlite3-includes=DIR      Search for SQLite3 includes in the specified directory],
      [
	AC_LINEARIZE_PATH($withval, withval=$absdir)
	INCLUDES="${INCLUDES} -I$withval"
	SQLITE3INCLUDES=$withval
	SQLITE3INCLUDESFOUND=1
      ])

    if test x"$SQLITE3INCLUDES" != x""; then
      AC_MSG_CHECKING(your own SQLite3 headers)
      if test -r $SQLITE3INCLUDES/sqlite3.h; then
	AC_MSG_RESULT(ok)
      else
	AC_MSG_RESULT(no)
	AC_MSG_ERROR(ERROR: missing SQLite3 headers in $SQLITE3INCLUDES)
      fi
    fi

    if test x"$SQLITE3INCLUDESFOUND" = x""; then 
      AC_MSG_CHECKING([default locations for sqlite3.h])
      if test -r /usr/include/sqlite3.h; then
	AC_MSG_RESULT([found in /usr/include])
	SQLITE3INCLUDESFOUND=1;
      elif test -r /usr/local/include/sqlite3.h; then
	# INCLUDES="${INCLUDES} -I/usr/local/include"
	AC_MSG_RESULT([found in /usr/local/include])
	SQLITE3INCLUDESFOUND=1;
      elif test -r /usr/local/sqlite3/include/sqlite3.h; then
        INCLUDES="${INCLUDES} -I/usr/local/sqlite3/include"
        AC_MSG_RESULT([found in /usr/local/sqlite3/include])
        SQLITE3INCLUDESFOUND=1;
      fi
      if test x"$SQLITE3INCLUDESFOUND" = x""; then
	AC_MSG_RESULT([not found])
      fi
    fi

    if test x"$SQLITE3INCLUDESFOUND" = x""; then
      AC_CHECK_HEADER([sqlite3.h],,
      [AC_MSG_ERROR(ERROR: missing SQLite3 headers)])      
    fi

    AC_DEFINE(WITH_SQLITE3, 1)
    PLUGINS="${PLUGINS} sqlite3_plugin.c"
    ;;
  no)
    AC_MSG_RESULT(no)
    ;;
  esac ],
AC_MSG_RESULT(no))
dnl finish: sqlite3 handling

dnl start: RabbitMQ/AMQP handling
AC_MSG_CHECKING(whether to enable RabbitMQ/AMQP support)
AC_ARG_ENABLE(rabbitmq,
  [  --enable-rabbitmq                Enable RabbitMQ/AMQP support (default: no)],
  [ case "$enableval" in
  yes)
    AC_MSG_RESULT(yes)
    USING_RABBITMQ="yes"

    AC_ARG_WITH(rabbitmq-libs,
      [  --with-rabbitmq-libs=DIR         Search for RabbitMQ libs in the specified directory],
      [
	AC_LINEARIZE_PATH($withval, withval=$absdir)
	LIBS="${LIBS} -L$withval"
	RABBITMQLIB=$withval
	RABBITMQLIBFOUND=1
      ]) 

    if test x"$RABBITMQLIB" != x""; then
      AC_MSG_CHECKING(your own RabbitMQ library)
      if test -r $RABBITMQLIB/librabbitmq.a -o -r $RABBITMQLIB/librabbitmq.so; then
        AC_MSG_RESULT(ok)
      else
        AC_MSG_RESULT(no)
	AC_MSG_ERROR(ERROR: missing RabbitMQ library in $RABBITMQLIB)
      fi
    fi

    if test x"$RABBITMQLIBFOUND" = x""; then
      AC_MSG_CHECKING([default locations for librabbitmq])
      if test -r /usr/lib/librabbitmq.a -o -r /usr/lib/librabbitmq.so; then
	AC_MSG_RESULT([found in /usr/lib])
	RABBITMQLIBFOUND=1
      elif test -r /usr/lib64/librabbitmq.a -o -r /usr/lib64/librabbitmq.so; then
        LIBS="${LIBS} -L/usr/lib64"
        AC_MSG_RESULT([found in /usr/lib64])
        RABBITMQLIBFOUND=1
      elif test -r /usr/local/lib/librabbitmq.a -o -r /usr/local/lib/librabbitmq.so; then
	LIBS="${LIBS} -L/usr/local/lib"
	AC_MSG_RESULT([found in /usr/local/lib])
	RABBITMQLIBFOUND=1
      else 
        AC_MSG_RESULT([not found])
      fi
    fi

    if test x"$RABBITMQLIBFOUND" = x""; then
      AC_CHECK_LIB([rabbitmq], [amqp_new_connection], [], [AC_MSG_ERROR([
        ERROR: missing RabbitMQ library. Refer to: https://github.com/alanxz/rabbitmq-c/
      ])])
    else 
      LIBS="${LIBS} -lrabbitmq"
    fi 

    AC_ARG_WITH(rabbitmq-includes,
      [  --with-rabbitmq-includes=DIR     Search for RabbitMQ includes in the specified directory],
      [
	AC_LINEARIZE_PATH($withval, withval=$absdir)
	INCLUDES="${INCLUDES} -I$withval"
	RABBITMQINCLUDES=$withval
	RABBITMQINCLUDESFOUND=1
      ])

    if test x"$RABBITMQINCLUDES" != x""; then
      AC_MSG_CHECKING(your own RabbitMQ headers)
      if test -r $RABBITMQINCLUDES/amqp.h; then
        AC_MSG_RESULT(ok)
      else
	AC_MSG_RESULT(no)
	AC_MSG_ERROR(ERROR: missing RabbitMQ headers in $RABBITMQINCLUDES)
      fi
    fi

    if test x"$RABBITMQINCLUDESFOUND" = x""; then 
      AC_MSG_CHECKING([default locations for amqp.h])
      if test -r /usr/include/amqp.h; then
	AC_MSG_RESULT([found in /usr/include])
	RABBITMQINCLUDESFOUND=1;
      elif test -r /usr/local/include/rabbitmq.h; then
	INCLUDES="${INCLUDES} -I/usr/local/include"
	AC_MSG_RESULT([found in /usr/local/include])
	RABBITMQINCLUDESFOUND=1;
      fi
      if test x"$RABBITMQINCLUDESFOUND" = x""; then
	AC_MSG_RESULT([not found])
      fi
    fi

    if test x"$RABBITMQINCLUDESFOUND" = x""; then
      AC_CHECK_HEADER([amqp.h],,
      [AC_MSG_ERROR(ERROR: missing RabbitMQ headers)])      
    fi

    AC_DEFINE(WITH_RABBITMQ, 1)
    PLUGINS="${PLUGINS} amqp_common.c amqp_plugin.c"
    ;;
  no)
    AC_MSG_RESULT(no)
    ;;
  esac ],
AC_MSG_RESULT(no))
dnl finish: RabbitMQ/AMQP handling


dnl start: Kafka handling
AC_MSG_CHECKING(whether to enable Kafka support)
AC_ARG_ENABLE(kafka,
  [  --enable-kafka                   Enable Kafka support (default: no)],
  [ case "$enableval" in
  yes)
    AC_MSG_RESULT(yes)
    USING_KAFKA="yes"

    AC_ARG_WITH(kafka-libs,
      [  --with-kafka-libs=DIR            Search for Kafka libs in the specified directory],
      [
	AC_LINEARIZE_PATH($withval, withval=$absdir)
	LIBS="${LIBS} -L$withval"
	KAFKALIB=$withval
	KAFKALIBFOUND=1
      ]) 

    if test x"$KAFKALIB" != x""; then
      AC_MSG_CHECKING(your own Kafka library)
      if test -r $KAFKALIB/librdkafka.a -o -r $KAFKALIB/librdkafka.so; then
        AC_MSG_RESULT(ok)
      else
        AC_MSG_RESULT(no)
	AC_MSG_ERROR(ERROR: missing Kafka library in $KAFKALIB)
      fi
    fi

    if test x"$KAFKALIBFOUND" = x""; then
      AC_MSG_CHECKING([default locations for librdkafka])
      if test -r /usr/lib/librdkafka.a -o -r /usr/lib/librdkafka.so; then
	AC_MSG_RESULT([found in /usr/lib])
	KAFKALIBFOUND=1
      elif test -r /usr/lib64/librdkafka.a -o -r /usr/lib64/librdkafka.so; then
        LIBS="${LIBS} -L/usr/lib64"
        AC_MSG_RESULT([found in /usr/lib64])
        KAFKALIBFOUND=1
      elif test -r /usr/local/lib/librdkafka.a -o -r /usr/local/lib/librdkafka.so; then
	LIBS="${LIBS} -L/usr/local/lib"
	AC_MSG_RESULT([found in /usr/local/lib])
	KAFKALIBFOUND=1
      else 
        AC_MSG_RESULT([not found])
      fi
    fi

    if test x"$KAFKALIBFOUND" = x""; then
      AC_CHECK_LIB([rdkafka], [rd_kafka_new], [], [AC_MSG_ERROR([
        ERROR: missing Kafka library. Refer to: https://github.com/edenhill/librdkafka/
      ])])
    else 
      LIBS="${LIBS} -lrdkafka"
    fi 

    AC_ARG_WITH(kafka-includes,
      [  --with-kafka-includes=DIR        Search for Kafka includes in the specified directory],
      [
	AC_LINEARIZE_PATH($withval, withval=$absdir)
	INCLUDES="${INCLUDES} -I$withval"
	KAFKAINCLUDES=$withval
	KAFKAINCLUDESFOUND=1
      ])

    if test x"$KAFKAINCLUDES" != x""; then
      AC_MSG_CHECKING(your own Kafka headers)
      if test -r $KAFKAINCLUDES/librdkafka/rdkafka.h; then
        AC_MSG_RESULT(ok)
      else
	AC_MSG_RESULT(no)
	AC_MSG_ERROR(ERROR: missing Kafka headers in $KAFKAINCLUDES)
      fi
    fi

    if test x"$KAFKAINCLUDESFOUND" = x""; then 
      AC_MSG_CHECKING([default locations for rdkafka.h])
      if test -r /usr/include/librdkafka/rdkafka.h; then
	AC_MSG_RESULT([found in /usr/include])
	KAFKAINCLUDESFOUND=1;
      elif test -r /usr/local/include/librdkafka/rdkafka.h; then
	INCLUDES="${INCLUDES} -I/usr/local/include"
	AC_MSG_RESULT([found in /usr/local/include])
	KAFKAINCLUDESFOUND=1;
      fi
      if test x"$KAFKAINCLUDESFOUND" = x""; then
	AC_MSG_RESULT([not found])
      fi
    fi

    if test x"$KAFKAINCLUDESFOUND" = x""; then
      AC_CHECK_HEADER([librdkafka/rdkafka.h],,
      [AC_MSG_ERROR(ERROR: missing Kafka headers)])      
    fi

    AC_DEFINE(WITH_KAFKA, 1)
    PLUGINS="${PLUGINS} kafka_common.c kafka_plugin.c"
    ;;
  no)
    AC_MSG_RESULT(no)
    ;;
  esac ],
AC_MSG_RESULT(no))
dnl finish: Kafka handling

dnl start: geoip handling
AC_MSG_CHECKING(whether to enable GeoIP support)
AC_ARG_ENABLE(geoip,
  [  --enable-geoip                   Enable GeoIP support (default: no)],
  [ case "$enableval" in
  yes)
    AC_MSG_RESULT(yes)
    USING_MMGEOIP="yes"

    AC_ARG_WITH(geoip-libs,
      [  --with-geoip-libs=DIR            Search for Maxmind GeoIP libs in the specified directory],
      [
	AC_LINEARIZE_PATH($withval, withval=$absdir)
	LIBS="${LIBS} -L$withval"
	MMGEOIPLIB=$withval
	MMGEOIPLIBFOUND=1
      ]) 

    if test x"$MMGEOIPLIB" != x""; then
      AC_MSG_CHECKING(your own Maxmind GeoIP library)
      if test -r $MMGEOIPLIB/libGeoIP.a -o -r $MMGEOIPLIB/libGeoIP.so; then
        AC_MSG_RESULT(ok)
      else
        AC_MSG_RESULT(no)
	AC_MSG_ERROR(ERROR: missing Maxmind GeoIP library in $MMGEOIPLIB)
      fi
    fi

    if test x"$MMGEOIPLIBFOUND" = x""; then
      AC_MSG_CHECKING([default locations for libGeoIP])
      if test -r /usr/lib/libGeoIP.a -o -r /usr/lib/libGeoIP.so; then
	AC_MSG_RESULT([found in /usr/lib])
	MMGEOIPLIBFOUND=1
      elif test -r /usr/lib64/libGeoIP.a -o -r /usr/lib64/libGeoIP.so; then
        LIBS="${LIBS} -L/usr/lib64"
        AC_MSG_RESULT([found in /usr/lib64])
        MMGEOIPLIBFOUND=1
      elif test -r /usr/local/lib/libGeoIP.a -o -r /usr/local/lib/libGeoIP.so; then
	LIBS="${LIBS} -L/usr/local/lib"
	AC_MSG_RESULT([found in /usr/local/lib])
	MMGEOIPLIBFOUND=1
      else 
        AC_MSG_RESULT([not found])
      fi
    fi

    if test x"$MMGEOIPLIBFOUND" = x""; then
      AC_CHECK_LIB([GeoIP], [GeoIP_open], [], [AC_MSG_ERROR([
	ERROR: missing Maxmind GeoIP library. Refer to: http://www.maxmind.com/download/geoip/api/c/ 
      ])])
    else 
      LIBS="${LIBS} -lGeoIP"
    fi 

    AC_ARG_WITH(geoip-includes,
      [  --with-geoip-includes=DIR        Search for Maxmind GeoIP includes in the specified directory],
      [
	AC_LINEARIZE_PATH($withval, withval=$absdir)
	INCLUDES="${INCLUDES} -I$withval"
	MMGEOIPINCLUDES=$withval
	MMGEOIPINCLUDESFOUND=1
      ])

    if test x"$MMGEOIPINCLUDES" != x""; then
      AC_MSG_CHECKING(your own Maxmind GeoIP headers)
      if test -r $MMGEOIPINCLUDES/GeoIP.h; then
        AC_MSG_RESULT(ok)
      else
	AC_MSG_RESULT(no)
	AC_MSG_ERROR(ERROR: missing Maximind GeoIP headers in $MMGEOIPINCLUDES)
      fi
    fi

    if test x"$MMGEOIPINCLUDESFOUND" = x""; then 
      AC_MSG_CHECKING([default locations for GeoIP.h])
      if test -r /usr/include/GeoIP.h; then
	AC_MSG_RESULT([found in /usr/include])
	MMGEOIPINCLUDESFOUND=1;
      elif test -r /usr/local/include/GeoIP.h; then
	INCLUDES="${INCLUDES} -I/usr/local/include"
	AC_MSG_RESULT([found in /usr/local/include])
	MMGEOIPINCLUDESFOUND=1;
      fi
      if test x"$MMGEOIPINCLUDESFOUND" = x""; then
	AC_MSG_RESULT([not found])
      fi
    fi

    if test x"$MMGEOIPINCLUDESFOUND" = x""; then
      AC_CHECK_HEADER([GeoIP.h],,
      [AC_MSG_ERROR(ERROR: missing Maxmind GeoIP headers)])      
    fi

    AC_DEFINE(WITH_GEOIP, 1)
    ;;
  no)
    AC_MSG_RESULT(no)
    ;;
  esac ],
AC_MSG_RESULT(no))

AC_MSG_CHECKING(whether to enable GeoIPv2 (libmaxminddb) support)
AC_ARG_ENABLE(geoipv2,
  [  --enable-geoipv2                 Enable GeoIPv2 (libmaxminddb) support (default: no)],
  [ case "$enableval" in
  yes)
    AC_MSG_RESULT(yes)
    USING_MMGEOIPV2="yes"

    AC_ARG_WITH(geoipv2-libs,
      [  --with-geoipv2-libs=DIR          Search for Maxmind libmaxminddb libs in the specified directory],
      [
	AC_LINEARIZE_PATH($withval, withval=$absdir)
	LIBS="${LIBS} -L$withval"
	MMGEOIPLIBV2=$withval
	MMGEOIPLIBFOUNDV2=1
      ]) 

    if test x"$MMGEOIPLIBV2" != x""; then
      AC_MSG_CHECKING(your own Maxmind libmaxminddb library)
      if test -r $MMGEOIPLIBV2/libmaxminddb.a -o -r $MMGEOIPLIBV2/libmaxminddb.so; then
        AC_MSG_RESULT(ok)
      else
        AC_MSG_RESULT(no)
	AC_MSG_ERROR(ERROR: missing Maxmind libmaxminddb library in $MMGEOIPLIBV2)
      fi
    fi

    if test x"$MMGEOIPLIBFOUNDV2" = x""; then
      AC_MSG_CHECKING([default locations for libmaxminddb])
      if test -r /usr/lib/libmaxminddb.a -o -r /usr/lib/libmaxminddb.so; then
	AC_MSG_RESULT([found in /usr/lib])
	MMGEOIPLIBFOUNDV2=1
      elif test -r /usr/lib64/libmaxminddb.a -o -r /usr/lib64/libmaxminddb.so; then
        LIBS="${LIBS} -L/usr/lib64"
        AC_MSG_RESULT([found in /usr/lib64])
        MMGEOIPLIBFOUNDV2=1
      elif test -r /usr/local/lib/libmaxminddb.a -o -r /usr/local/lib/libmaxminddb.so; then
	LIBS="${LIBS} -L/usr/local/lib"
	AC_MSG_RESULT([found in /usr/local/lib])
	MMGEOIPLIBFOUNDV2=1
      else 
        AC_MSG_RESULT([not found])
      fi
    fi

    if test x"$MMGEOIPLIBFOUNDV2" = x""; then
      AC_CHECK_LIB([libmaxminddb], [MMDB_open], [], [AC_MSG_ERROR([
	ERROR: missing Maxmind libmaxminddb library. Refer to: http://www.maxmind.com/download/geoip/api/c/ 
      ])])
    else 
      LIBS="${LIBS} -lmaxminddb"
    fi 

    AC_ARG_WITH(geoipv2-includes,
      [  --with-geoipv2-includes=DIR      Search for Maxmind libmaxminddb includes in the specified directory],
      [
	AC_LINEARIZE_PATH($withval, withval=$absdir)
	INCLUDES="${INCLUDES} -I$withval"
	MMGEOIPINCLUDESV2=$withval
	MMGEOIPINCLUDESFOUNDV2=1
      ])

    if test x"$MMGEOIPINCLUDESV2" != x""; then
      AC_MSG_CHECKING(your own Maxmind libmaxminddb headers)
      if test -r $MMGEOIPINCLUDESV2/maxminddb.h; then
        AC_MSG_RESULT(ok)
      else
	AC_MSG_RESULT(no)
	AC_MSG_ERROR(ERROR: missing Maximind libmaxminddb headers in $MMGEOIPINCLUDESV2)
      fi
    fi

    if test x"$MMGEOIPINCLUDESFOUNDV2" = x""; then 
      AC_MSG_CHECKING([default locations for maxminddb.h])
      if test -r /usr/include/maxminddb.h; then
	AC_MSG_RESULT([found in /usr/include])
	MMGEOIPINCLUDESFOUNDV2=1;
      elif test -r /usr/local/include/maxminddb.h; then
	INCLUDES="${INCLUDES} -I/usr/local/include"
	AC_MSG_RESULT([found in /usr/local/include])
	MMGEOIPINCLUDESFOUNDV2=1;
      fi
      if test x"$MMGEOIPINCLUDESFOUNDV2" = x""; then
	AC_MSG_RESULT([not found])
      fi
    fi

    if test x"$MMGEOIPINCLUDESFOUNDV2" = x""; then
      AC_CHECK_HEADER([maxminddb.h],,
      [AC_MSG_ERROR(ERROR: missing Maxmind libmaxminddb headers)])      
    fi

    AC_DEFINE(WITH_GEOIPV2, 1)
    ;;
  no)
    AC_MSG_RESULT(no)
    ;;
  esac ],
AC_MSG_RESULT(no))
dnl finish: GeoIP handling

dnl start: Jansson handling
AC_MSG_CHECKING(whether to enable Jansson support)
AC_ARG_ENABLE(jansson,
  [  --enable-jansson                 Enable Jansson support (default: no)],
  [ case "$enableval" in
  yes)
    AC_MSG_RESULT(yes)
    USING_JANSSON="yes"

    AC_ARG_WITH(jansson-libs,
      [  --with-jansson-libs=DIR          Search for Jansson libs in the specified directory],
      [
	AC_LINEARIZE_PATH($withval, withval=$absdir)
	LIBS="${LIBS} -L$withval"
	JANSSONLIB=$withval
	JANSSONLIBFOUND=1
      ]) 

    if test x"$JANSSONLIB" != x""; then
      AC_MSG_CHECKING(your own Jansson library)
      if test -r $JANSSONLIB/libjansson.a -o -r $JANSSONLIB/libjansson.so; then
        AC_MSG_RESULT(ok)
      else
        AC_MSG_RESULT(no)
	AC_MSG_ERROR(ERROR: missing Jansson library in $JANSSONLIB)
      fi
    fi

    if test x"$JANSSONLIBFOUND" = x""; then
      AC_MSG_CHECKING([default locations for Jansson library])
      if test -r /usr/lib/libjansson.a -o -r /usr/lib/libjansson.so; then
	AC_MSG_RESULT([found in /usr/lib])
	JANSSONLIBFOUND=1
      elif test -r /usr/lib64/libjansson.a -o -r /usr/lib64/libjansson.so; then
        LIBS="${LIBS} -L/usr/lib64"
        AC_MSG_RESULT([found in /usr/lib64])
        JANSSONLIBFOUND=1
      elif test -r /usr/local/lib/libjansson.a -o -r /usr/local/lib/libjansson.so; then
	LIBS="${LIBS} -L/usr/local/lib"
	AC_MSG_RESULT([found in /usr/local/lib])
	JANSSONLIBFOUND=1
      else 
        AC_MSG_RESULT([not found])
      fi
    fi

    if test x"$JANSSONLIBFOUND" = x""; then
      AC_CHECK_LIB([jansson], [json_object], [], [AC_MSG_ERROR([
	ERROR: missing Jansson library. Refer to: http://www.digip.org/jansson/ 
      ])])
    else 
      LIBS="${LIBS} -ljansson"
    fi 

    AC_ARG_WITH(jansson-includes,
      [  --with-jansson-includes=DIR      Search for Jansson includes in the specified directory],
      [
	AC_LINEARIZE_PATH($withval, withval=$absdir)
	INCLUDES="${INCLUDES} -I$withval"
	JANSSONINCLUDES=$withval
	JANSSONINCLUDESFOUND=1
      ])

    if test x"$JANSSONINCLUDES" != x""; then
      AC_MSG_CHECKING(your own Jansson headers)
      if test -r $JANSSONINCLUDES/jansson.h; then
        AC_MSG_RESULT(ok)
      else
	AC_MSG_RESULT(no)
	AC_MSG_ERROR(ERROR: missing Jansson headers in $JANSSONINCLUDES)
      fi
    fi

    if test x"$JANSSONINCLUDESFOUND" = x""; then 
      AC_MSG_CHECKING([default locations for jansson.h])
      if test -r /usr/include/jansson.h; then
	AC_MSG_RESULT([found in /usr/include])
	JANSSONINCLUDESFOUND=1;
      elif test -r /usr/local/include/jansson.h; then
	INCLUDES="${INCLUDES} -I/usr/local/include"
	AC_MSG_RESULT([found in /usr/local/include])
	JANSSONINCLUDESFOUND=1;
      fi
      if test x"$JANSSONINCLUDESFOUND" = x""; then
	AC_MSG_RESULT([not found])
      fi
    fi

    if test x"$JANSSONINCLUDESFOUND" = x""; then
      AC_CHECK_HEADER([jansson.h],,
      [AC_MSG_ERROR(ERROR: missing Jansson headers)])      
    fi

    AC_DEFINE(WITH_JANSSON, 1)
    ;;
  no)
    AC_MSG_RESULT(no)
    ;;
  esac ],
AC_MSG_RESULT(no))
dnl finish: Jansson handling

if test x"$USING_DLOPEN" = x"yes"; then
	AC_DEFINE(HAVE_DLOPEN, 1)
else
	# Adding linking to libdl here 1) if required and 2) in case of --disable-so
	if test x"$USING_MYSQL" = x"yes" -o x"$USING_SQLITE3" = x"yes"; then
		AC_CHECK_LIB([dl], [dlopen], [LIBS="${LIBS} -ldl"], [AC_MSG_ERROR([
		  ERROR: missing libdl devel.
		])])
	fi
fi

if test x"$USING_SQL" = x"yes"; then
	PLUGINS="${PLUGINS} sql_common.c sql_handlers.c"
	LIBS="${LIBS} -lm -lz"
fi

dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([getopt.h sys/select.h sys/time.h])

dnl Checks for typedefs, structures, and compiler characteristics.
AC_CHECK_TYPEDEF(u_int64_t, sys/types.h)
AC_CHECK_TYPEDEF(u_int32_t, sys/types.h)
AC_CHECK_TYPEDEF(u_int16_t, sys/types.h)
AC_CHECK_TYPEDEF(u_int8_t, sys/types.h)
AC_CHECK_TYPEDEF(uint64_t, sys/types.h)
AC_CHECK_TYPEDEF(uint32_t, sys/types.h)
AC_CHECK_TYPEDEF(uint16_t, sys/types.h)
AC_CHECK_TYPEDEF(uint8_t, sys/types.h)

AC_MSG_CHECKING([whether to enable 64bit counters])
AC_ARG_ENABLE(64bit,
        [  --enable-64bit                   Enable 64bit counters (default: yes)],
        if test x$enableval = x"yes" ; then
          AC_MSG_RESULT(yes)
          AC_DEFINE(HAVE_64BIT_COUNTERS, 1)
        else
          AC_MSG_RESULT(no)
        fi
        ,
        AC_MSG_RESULT(yes)
	AC_DEFINE(HAVE_64BIT_COUNTERS, 1)
)

AC_MSG_CHECKING([whether to enable multithreading in pmacct])
AC_ARG_ENABLE(threads,
        [  --enable-threads                 Enable multi-threading in pmacct (default: yes)],
        if test x$enableval = x"yes" ; then
          AC_MSG_RESULT(yes)
          AC_DEFINE(ENABLE_THREADS, 1)
	  
	  dnl OS Specifics
	  [
	    case "$host" in
	    *-linux-*)
	      AC_DEFINE(_XOPEN_SOURCE, 600)
	      AC_DEFINE(_GNU_SOURCE, 1)
	      ;;
	    esac
	  ]


	  LIBS="${LIBS} -lpthread"
	  THREADS_SOURCES="thread_pool.c"
	else
          AC_MSG_RESULT(no)
	  THREADS_SOURCES=""
        fi
        ,
        AC_MSG_RESULT(yes)
        AC_DEFINE(ENABLE_THREADS, 1)

          dnl OS Specifics
          [
            case "$host" in
            *-linux-*)
              AC_DEFINE(_XOPEN_SOURCE, 600)
              AC_DEFINE(_GNU_SOURCE, 1)
              ;;
            esac
          ]


          LIBS="${LIBS} -lpthread"
          THREADS_SOURCES="thread_pool.c"
)

AC_MSG_CHECKING(whether to enable ULOG support)
AC_ARG_ENABLE(ulog,
  [  --enable-ulog                    Enable ULOG support (default: no)],
       if test "x$enableval" = xyes ; then
               AC_MSG_RESULT(yes)
               CFLAGS="${CFLAGS} -DENABLE_ULOG"
       else
               AC_MSG_RESULT(no)
       fi
       ,
       AC_MSG_RESULT(no)
)

dnl Checks for library functions.
AC_TYPE_SIGNAL

dnl AC_CHECK_FUNCS(inet_ntoa socket)
AC_CHECK_FUNCS([strlcpy vsnprintf setproctitle mallopt json_object_update_missing])

dnl final checks
dnl trivial solution to portability issue 
CFLAGS="${CFLAGS} ${INCLUDES}"
INCLUDES=""

case "$host_os" in
  IRIX*)
    LIBS="${LIBS} -lgen"
    ;;
esac

echo "
PLATFORM ..... : `uname -m`
OS ........... : `uname -rs` (`uname -n`)
COMPILER ..... : ${CC}
CFLAGS ....... : ${CFLAGS}
LIBS ......... : ${LIBS}
LDFLAGS ...... : ${LDFLAGS}

Now type 'make' to compile the source code.

Are you willing to get in touch with other pmacct users?
Join the pmacct mailing-list by sending a message to pmacct-discussion-subscribe@pmacct.net

Need for documentation and examples?
Read the README file or go to http://wiki.pmacct.net/

"
AC_SUBST([PLUGINS])
AC_SUBST([THREADS_SOURCES])
AC_SUBST([EXTRABIN])
AC_OUTPUT([ Makefile \
	    src/Makefile src/nfprobe_plugin/Makefile \
	    src/sfprobe_plugin/Makefile src/bgp/Makefile \
	    src/tee_plugin/Makefile src/isis/Makefile \
	    src/bmp/Makefile ])
